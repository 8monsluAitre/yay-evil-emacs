#+Title: Ian Y.E. Pan's Emacs Configuration
#+Author: Ian Y.E. Pan
#+Date: 2019
* Evil Mode
I personally find Vi(m) bindings to be the most efficient way of editing text (especially code) . I also changed the default ':q' and ':wq' to be killing current buffer instead of killing the frame or subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)  ; use C-u to scroll up half a page
  (evil-mode 1)
  (evil-set-initial-state 'term-mode 'emacs)

  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))

  (defun ian/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))

  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "wq" 'ian/save-and-kill-this-buffer)
#+END_SRC
* Company Autocompletion & Yasnippets
Company for autocompletion. Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'company-mode)

  (setq company-minimum-prefix-length 1
        company-idle-delay 0
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                            company-echo-metadata-frontend))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

Activate yasnippets and tweak TAB behaviour so it doesn't clash with company-mode
#+begin_src emacs-lisp
  (yas-global-mode 1)

  (advice-add 'company-complete-common
              :before
              (lambda ()
                (setq my-company-point (point))))

  (advice-add 'company-complete-common
              :after
              (lambda ()
                (when (equal my-company-point (point))
                  (yas-expand))))
#+end_src
* Flycheck and Spellcheck
Use aspell instead of ispell for checking spelling mistakes
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC
* Ido
Ido (with ido-vertical package) for selecting buffer/file with great efficiency.
#+BEGIN_SRC emacs-lisp
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-everywhere t
        ido-enable-flex-matching t
        ido-vertical-define-keys 'C-n-C-p-up-and-down)
#+END_SRC
* Indentation
Use 4-space indentation (no tabs) as default. Except for Javascript (2 spaces)
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4
                c-basic-offset 4)
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "k&r")))
  (setq js-indent-level 2)
#+END_SRC
* Magit
Magit -- need I say more? The best git interface ever.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Org Mode
Some minimal org mode tweaks.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
* Start-up
** Maximize frame by default
#+BEGIN_SRC emacs-lisp
  (setq initial-frame-alist (quote ((fullscreen . maximized))))
#+END_SRC
** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-banner-logo-title "Happy Hacking!")
  (setq dashboard-items nil)
  (setq dashboard-set-footer nil)
#+END_SRC
** Better looks and defaults
*** Setting default font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "Menlo-13" nil t)
#+END_SRC
*** Smooth Scrolling
Override Emacs' default scrolling design: jumping half-page. Also set the mouse scrolling speed to a more reasonable amount.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 10000
        scroll-preserve-screen-position t
        auto-window-vscroll nil
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil)
#+END_SRC
*** Auto-pairing brackets etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this. It also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
*** Improving / Cleaning up the UI.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        ring-bell-function 'ignore
        confirm-kill-processes nil
        make-backup-files nil
        default-directory "~/"
        eldoc-idle-delay 0.4)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (column-number-mode)

  (setq show-paren-delay 0)
  (show-paren-mode 1)

  (setq-default line-spacing 3)

  (setq frame-title-format '("Emacs"))
#+END_SRC
** Lightweight syntax highlighting improvement for numbers, operators, and escape sequences
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'highlight-numbers-mode)
  (add-hook 'prog-mode-hook 'highlight-operators-mode)
  (add-hook 'prog-mode-hook 'hes-mode)    ;; highlight escape sequences
#+END_SRC
** No Backup~ Files
For some people it may be useful. But I just disable it because I rarely needed those backup files scattering about in directories.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
** Auto-reverting
#+BEGIN_SRC emacs-lisp
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        auto-revert-verbose nil)

  (add-hook 'after-init-hook 'global-auto-revert-mode)
#+END_SRC
* Views and Windows
Split right and split below.
#+BEGIN_SRC emacs-lisp
  (defun ian/split-and-follow-horizontally ()
    "Split window below"
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun ian/split-and-follow-vertically ()
    "Split window right"
    (interactive)
    (split-window-right)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'ian/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'ian/split-and-follow-vertically)
#+END_SRC
* Which Key
#+BEGIN_SRC emacs-lisp
  (which-key-mode t)
  (setq which-key-idle-delay 0.4)
  (setq which-key-idle-secondary-delay 0.4)
#+END_SRC
* Whitespace cleanup on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC
